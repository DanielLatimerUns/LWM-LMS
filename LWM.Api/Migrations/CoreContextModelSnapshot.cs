// <auto-generated />
using System;
using LWM.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LWM.Api.Migrations
{
    [DbContext(typeof(CoreContext))]
    partial class CoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LWM.Data.Models.AzureObjectLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AzureId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AzureObjectLinks");
                });

            modelBuilder.Entity("LWM.Data.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AzureUserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("LWM.Data.Models.Curriculum.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AzureObjectLinkId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NativeLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Targetlanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AzureObjectLinkId");

                    b.ToTable("LessonCurriculums");
                });

            modelBuilder.Entity("LWM.Data.Models.Document.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AzureObjectLinkId")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AzureObjectLinkId");

                    b.HasIndex("LessonId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("LWM.Data.Models.Group.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompletedLessonNo")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("LWM.Data.Models.Lesson.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AzureObjectLinkId")
                        .HasColumnType("integer");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("integer");

                    b.Property<int>("LessonNo")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AzureObjectLinkId");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("LWM.Data.Models.Person.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PersonType")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("LWM.Data.Models.Person.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PersonId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LWM.Data.Models.Person.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("LWM.Data.Models.Schedule.ScheduleInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduledDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ScheduleItemId");

                    b.ToTable("Instances");
                });

            modelBuilder.Entity("LWM.Data.Models.Schedule.ScheduleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Repeat")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduledDayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("ScheduledEndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("ScheduledStartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("StartWeek")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeTableEntryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TimeTableEntryId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("LWM.Data.Models.TimeTable.TimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("LWM.Data.Models.TimeTable.TimeTableDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TimeTableId");

                    b.ToTable("TimeTableDays");
                });

            modelBuilder.Entity("LWM.Data.Models.TimeTable.TimeTableEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTableDayId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TimeTableDayId");

                    b.ToTable("TimeTableEntries");
                });

            modelBuilder.Entity("LWM.Data.Models.Curriculum.Curriculum", b =>
                {
                    b.HasOne("LWM.Data.Models.AzureObjectLink", "AzureObjectLink")
                        .WithMany()
                        .HasForeignKey("AzureObjectLinkId");

                    b.Navigation("AzureObjectLink");
                });

            modelBuilder.Entity("LWM.Data.Models.Document.Document", b =>
                {
                    b.HasOne("LWM.Data.Models.AzureObjectLink", "AzureObjectLink")
                        .WithMany()
                        .HasForeignKey("AzureObjectLinkId");

                    b.HasOne("LWM.Data.Models.Lesson.Lesson", "Lesson")
                        .WithMany("Documents")
                        .HasForeignKey("LessonId");

                    b.Navigation("AzureObjectLink");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LWM.Data.Models.Group.Group", b =>
                {
                    b.HasOne("LWM.Data.Models.Person.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LWM.Data.Models.Lesson.Lesson", b =>
                {
                    b.HasOne("LWM.Data.Models.AzureObjectLink", "AzureObjectLink")
                        .WithMany()
                        .HasForeignKey("AzureObjectLinkId");

                    b.HasOne("LWM.Data.Models.Curriculum.Curriculum", "Curriculum")
                        .WithMany("Lessons")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AzureObjectLink");

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("LWM.Data.Models.Person.Student", b =>
                {
                    b.HasOne("LWM.Data.Models.Group.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.HasOne("LWM.Data.Models.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Group");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LWM.Data.Models.Person.Teacher", b =>
                {
                    b.HasOne("LWM.Data.Models.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LWM.Data.Models.Schedule.ScheduleInstance", b =>
                {
                    b.HasOne("LWM.Data.Models.Lesson.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LWM.Data.Models.Schedule.ScheduleItem", "ScheduleItem")
                        .WithMany()
                        .HasForeignKey("ScheduleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("ScheduleItem");
                });

            modelBuilder.Entity("LWM.Data.Models.Schedule.ScheduleItem", b =>
                {
                    b.HasOne("LWM.Data.Models.Group.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LWM.Data.Models.TimeTable.TimeTableEntry", "TimeTableEntry")
                        .WithMany()
                        .HasForeignKey("TimeTableEntryId");

                    b.Navigation("Group");

                    b.Navigation("TimeTableEntry");
                });

            modelBuilder.Entity("LWM.Data.Models.TimeTable.TimeTableDay", b =>
                {
                    b.HasOne("LWM.Data.Models.TimeTable.TimeTable", "TimeTable")
                        .WithMany("Days")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("LWM.Data.Models.TimeTable.TimeTableEntry", b =>
                {
                    b.HasOne("LWM.Data.Models.Group.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LWM.Data.Models.Person.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LWM.Data.Models.TimeTable.TimeTableDay", "TimeTableDay")
                        .WithMany("TimeTableEntries")
                        .HasForeignKey("TimeTableDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Teacher");

                    b.Navigation("TimeTableDay");
                });

            modelBuilder.Entity("LWM.Data.Models.Curriculum.Curriculum", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LWM.Data.Models.Group.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("LWM.Data.Models.Lesson.Lesson", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("LWM.Data.Models.TimeTable.TimeTable", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("LWM.Data.Models.TimeTable.TimeTableDay", b =>
                {
                    b.Navigation("TimeTableEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
